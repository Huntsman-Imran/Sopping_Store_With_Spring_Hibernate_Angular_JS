<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com.project</groupId>
	<artifactId>onlineshoppingbak</artifactId>
	<packaging>war</packaging>
	<version>0.0.1-SNAPSHOT</version>
	<name>onlineshoppingbak Maven Webapp</name>
	<url>http://maven.apache.org</url>

	<properties>
		<javaee.version>8.0</javaee.version>
		<spring.version>4.3.6.RELEASE</spring.version>
	</properties>

	<dependencies>
	                                            <!-- SPRING -->
		<!-- spring-webmvc -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-webmvc</artifactId>
			<version>${spring.version}</version>
		</dependency>
		                                    <!-- JAVA EE -->
		<!-- It generally used to resolve the error of HttpServelt super class 
			is not found in the build path. Generally this javaee-api is provided in 
			java web container or runtime environment such as Apache Tomcat. But it causes 
			problem when we change the runtime environment to glassfish or others. So 
			to avoid such problem permanently i've used javaee-api -->
		<dependency>
			<groupId>javax</groupId>
			<artifactId>javaee-api</artifactId>
			<version>${javaee.version}</version>
			<scope>provided</scope>
		</dependency>
		                                           <!-- JUNIT -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>3.8.1</version>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<!-- This plugin is generally used to update latest version of java -->
			<plugin>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>2.3.2</version>
				<configuration>
					<source>1.7</source>
					<target>1.7</target>
				</configuration>
			</plugin>
		</plugins>

		<finalName>onlineshoppingbak</finalName>
	</build>
</project>
